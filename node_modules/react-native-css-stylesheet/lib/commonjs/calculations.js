"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.viewportWidth = exports.viewportMin = exports.viewportMax = exports.viewportHeight = exports.verticalScale = exports.sizeRegex = exports.setGuidelineBaseDimensions = exports.setDefaultFontSize = exports.scale = exports.rem = exports.moderateVerticalScale = exports.moderateScale = exports.isValidSize = exports.getCurrentOrientation = exports.calculateSize = void 0;

var _reactNative = require("react-native");

var _utils = require("./utils");

const sizeRegex = /^(?:(?:(\d+(?:\.\d+)?){1}((?:(mv?s)+(0*(?:\.\d+)|1(\.0+)){1}){1}|s|vs|px)?)|(?:(100|\d\d?(?:\.\d+)?){1}(rem|vh|vw|vmin|vmax)))$/;
exports.sizeRegex = sizeRegex;

const getHeight = () => _reactNative.Dimensions.get("window").height;

const getWidth = () => _reactNative.Dimensions.get("window").width;

const getShortDimension = () => {
  return Math.min(getWidth(), getHeight());
};

const getLongDimension = () => {
  return Math.max(getWidth(), getHeight());
}; // Default guideline sizes are based on standard ~5" screen mobile device


const defaultSize = {
  defaultFontSize: 16,
  guidelineBaseHeight: 600,
  guidelineBaseWidth: 350
};

const scale = size => {
  const formattedSize = (0, _utils.isValidPositiveNumber)(size, "Size should be a number.", "Size should be greater than 0.");
  return getShortDimension() / defaultSize.guidelineBaseWidth * formattedSize;
};

exports.scale = scale;

const verticalScale = size => {
  const formattedSize = (0, _utils.isValidPositiveNumber)(size, "Size should be a number.", "Size should be greater than 0.");
  return getLongDimension() / defaultSize.guidelineBaseHeight * formattedSize;
};

exports.verticalScale = verticalScale;

const moderateScale = (size, factor = 0.5) => {
  const formattedSize = (0, _utils.isValidPositiveNumber)(size, "Size should be a number.", "Size should be greater than 0.");
  const formattedFactor = (0, _utils.isValidPositiveNumber)(factor, "Factor should be a number.", "Factor should be greater than 0.");
  return formattedSize + (scale(formattedSize) - formattedSize) * formattedFactor;
};

exports.moderateScale = moderateScale;

const moderateVerticalScale = (size, factor = 0.5) => {
  const formattedSize = (0, _utils.isValidPositiveNumber)(size, "Size should be a number.", "Size should be greater than 0.");
  const formattedFactor = (0, _utils.isValidPositiveNumber)(factor, "Factor should be a number.", "Factor should be greater than 0.");
  return formattedSize + (verticalScale(formattedSize) - formattedSize) * formattedFactor;
};

exports.moderateVerticalScale = moderateVerticalScale;

const rem = size => {
  const formattedSize = (0, _utils.isValidPositiveNumber)(size, "Size should be a number.", "Size should be greater than 0.");
  return formattedSize * defaultSize.defaultFontSize;
};

exports.rem = rem;

const viewportMin = size => {
  const formattedSize = (0, _utils.isValidPositiveNumber)(size, "Size should be a number.", "Size should be greater than 0.");
  return formattedSize / 100 * getShortDimension();
};

exports.viewportMin = viewportMin;

const viewportMax = size => {
  const formattedSize = (0, _utils.isValidPositiveNumber)(size, "Size should be a number.", "Size should be greater than 0.");
  return formattedSize / 100 * getLongDimension();
};

exports.viewportMax = viewportMax;

const viewportHeight = size => {
  const formattedSize = (0, _utils.isValidPositiveNumber)(size, "Size should be a number.", "Size should be greater than 0.");
  return formattedSize / 100 * getHeight();
};

exports.viewportHeight = viewportHeight;

const viewportWidth = size => {
  const formattedSize = (0, _utils.isValidPositiveNumber)(size, "Size should be a number.", "Size should be greater than 0.");
  return formattedSize / 100 * getWidth();
};

exports.viewportWidth = viewportWidth;

const isValidSize = size => (0, _utils.regexTest)(sizeRegex, size).length > 0;

exports.isValidSize = isValidSize;

const calculateSize = size => {
  const splitSize = (0, _utils.regexTest)(sizeRegex, size);

  if (!splitSize || splitSize.length === 0) {
    throw new Error(`Size is not valid: ${size}`);
  }

  const extractedSize = parseFloat(splitSize[1]);
  let properties = splitSize.slice(2);

  if (properties.length > 1) {
    properties = properties.slice(1);
  }

  let calculatedSize = 0;

  switch (properties[0]) {
    case "s":
      calculatedSize = scale(extractedSize);
      break;

    case "vs":
      calculatedSize = verticalScale(extractedSize);
      break;

    case "ms":
      calculatedSize = moderateScale(extractedSize, properties[1]);
      break;

    case "mvs":
      calculatedSize = moderateVerticalScale(extractedSize, properties[1]);
      break;

    case "rem":
      calculatedSize = rem(extractedSize);
      break;

    case "vmin":
      calculatedSize = viewportMin(extractedSize);
      break;

    case "vmax":
      calculatedSize = viewportMax(extractedSize);
      break;

    case "vh":
      calculatedSize = viewportHeight(extractedSize);
      break;

    case "vw":
      calculatedSize = viewportWidth(extractedSize);
      break;

    default:
      calculatedSize = properties[0] ? extractedSize + (properties[0] || "") : extractedSize;
      break;
  }

  return calculatedSize;
}; // export const s = scale;
// export const vs = verticalScale;
// export const ms = moderateScale;
// export const mvs = moderateVerticalScale;
// export const vmin = viewportMin;
// export const vmax = viewportMax;
// export const vh = viewportHeight;


exports.calculateSize = calculateSize;

const getCurrentOrientation = () => {
  const width = getWidth();
  const height = getHeight();
  return width > height ? "landscape" : "portrait";
};

exports.getCurrentOrientation = getCurrentOrientation;

const setGuidelineBaseDimensions = (guidelineBaseWidth = 0, guidelineBaseHeight = 0) => {
  const baseWidth = (0, _utils.isValidPositiveNumber)(guidelineBaseWidth, "Guideline Base Width should be a number.", "Guideline Base Width should be greater than 0.");
  const baseHeight = (0, _utils.isValidPositiveNumber)(guidelineBaseHeight, "Guideline Base Height should be a number.", "Guideline Base Height should be greater than 0.");
  defaultSize.guidelineBaseHeight = baseHeight;
  defaultSize.guidelineBaseWidth = baseWidth;
};

exports.setGuidelineBaseDimensions = setGuidelineBaseDimensions;

const setDefaultFontSize = (defaultFontSize = 0, responsive) => {
  const fontSize = (0, _utils.isValidPositiveNumber)(defaultFontSize, "Default Font Size should be a number.", "Default Font Size should be greater than 0.");
  defaultSize.defaultFontSize = responsive ? scale(fontSize) : fontSize;
};

exports.setDefaultFontSize = setDefaultFontSize;
setDefaultFontSize(16, true);
//# sourceMappingURL=calculations.js.map