{"version":3,"sources":["calculations.js"],"names":["sizeRegex","getHeight","Dimensions","get","height","getWidth","width","getShortDimension","Math","min","getLongDimension","max","defaultSize","defaultFontSize","guidelineBaseHeight","guidelineBaseWidth","scale","size","formattedSize","verticalScale","moderateScale","factor","formattedFactor","moderateVerticalScale","rem","viewportMin","viewportMax","viewportHeight","viewportWidth","isValidSize","length","calculateSize","splitSize","Error","extractedSize","parseFloat","properties","slice","calculatedSize","getCurrentOrientation","setGuidelineBaseDimensions","baseWidth","baseHeight","setDefaultFontSize","responsive","fontSize"],"mappings":"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","sourcesContent":["import { Dimensions } from \"react-native\";\r\n\r\nimport { isValidPositiveNumber, regexTest } from \"./utils\";\r\n\r\nexport const sizeRegex =\r\n\t/^(?:(?:(\\d+(?:\\.\\d+)?){1}((?:(mv?s)+(0*(?:\\.\\d+)|1(\\.0+)){1}){1}|s|vs|px)?)|(?:(100|\\d\\d?(?:\\.\\d+)?){1}(rem|vh|vw|vmin|vmax)))$/;\r\n\r\nconst getHeight = () => Dimensions.get(\"window\").height;\r\nconst getWidth = () => Dimensions.get(\"window\").width;\r\n\r\nconst getShortDimension = () => {\r\n\treturn Math.min(getWidth(), getHeight());\r\n};\r\nconst getLongDimension = () => {\r\n\treturn Math.max(getWidth(), getHeight());\r\n};\r\n\r\n// Default guideline sizes are based on standard ~5\" screen mobile device\r\nconst defaultSize = {\r\n\tdefaultFontSize: 16,\r\n\tguidelineBaseHeight: 600,\r\n\tguidelineBaseWidth: 350,\r\n};\r\n\r\nexport const scale = (size: string | number): number => {\r\n\tconst formattedSize = isValidPositiveNumber(\r\n\t\tsize,\r\n\t\t\"Size should be a number.\",\r\n\t\t\"Size should be greater than 0.\"\r\n\t);\r\n\treturn (\r\n\t\t(getShortDimension() / defaultSize.guidelineBaseWidth) * formattedSize\r\n\t);\r\n};\r\nexport const verticalScale = (size: string | number): number => {\r\n\tconst formattedSize = isValidPositiveNumber(\r\n\t\tsize,\r\n\t\t\"Size should be a number.\",\r\n\t\t\"Size should be greater than 0.\"\r\n\t);\r\n\treturn (\r\n\t\t(getLongDimension() / defaultSize.guidelineBaseHeight) * formattedSize\r\n\t);\r\n};\r\n\r\nexport const moderateScale = (\r\n\tsize: string | number,\r\n\tfactor: string | number = 0.5\r\n): number => {\r\n\tconst formattedSize = isValidPositiveNumber(\r\n\t\tsize,\r\n\t\t\"Size should be a number.\",\r\n\t\t\"Size should be greater than 0.\"\r\n\t);\r\n\tconst formattedFactor = isValidPositiveNumber(\r\n\t\tfactor,\r\n\t\t\"Factor should be a number.\",\r\n\t\t\"Factor should be greater than 0.\"\r\n\t);\r\n\treturn (\r\n\t\tformattedSize + (scale(formattedSize) - formattedSize) * formattedFactor\r\n\t);\r\n};\r\n\r\nexport const moderateVerticalScale = (\r\n\tsize: string | number,\r\n\tfactor: string | number = 0.5\r\n): number => {\r\n\tconst formattedSize = isValidPositiveNumber(\r\n\t\tsize,\r\n\t\t\"Size should be a number.\",\r\n\t\t\"Size should be greater than 0.\"\r\n\t);\r\n\tconst formattedFactor = isValidPositiveNumber(\r\n\t\tfactor,\r\n\t\t\"Factor should be a number.\",\r\n\t\t\"Factor should be greater than 0.\"\r\n\t);\r\n\treturn (\r\n\t\tformattedSize +\r\n\t\t(verticalScale(formattedSize) - formattedSize) * formattedFactor\r\n\t);\r\n};\r\n\r\nexport const rem = (size: string | number): number => {\r\n\tconst formattedSize = isValidPositiveNumber(\r\n\t\tsize,\r\n\t\t\"Size should be a number.\",\r\n\t\t\"Size should be greater than 0.\"\r\n\t);\r\n\treturn formattedSize * defaultSize.defaultFontSize;\r\n};\r\n\r\nexport const viewportMin = (size: string | number): number => {\r\n\tconst formattedSize = isValidPositiveNumber(\r\n\t\tsize,\r\n\t\t\"Size should be a number.\",\r\n\t\t\"Size should be greater than 0.\"\r\n\t);\r\n\treturn (formattedSize / 100) * getShortDimension();\r\n};\r\n\r\nexport const viewportMax = (size: string | number): number => {\r\n\tconst formattedSize = isValidPositiveNumber(\r\n\t\tsize,\r\n\t\t\"Size should be a number.\",\r\n\t\t\"Size should be greater than 0.\"\r\n\t);\r\n\treturn (formattedSize / 100) * getLongDimension();\r\n};\r\n\r\nexport const viewportHeight = (size: string | number): number => {\r\n\tconst formattedSize = isValidPositiveNumber(\r\n\t\tsize,\r\n\t\t\"Size should be a number.\",\r\n\t\t\"Size should be greater than 0.\"\r\n\t);\r\n\r\n\treturn (formattedSize / 100) * getHeight();\r\n};\r\n\r\nexport const viewportWidth = (size: string | number): number => {\r\n\tconst formattedSize = isValidPositiveNumber(\r\n\t\tsize,\r\n\t\t\"Size should be a number.\",\r\n\t\t\"Size should be greater than 0.\"\r\n\t);\r\n\treturn (formattedSize / 100) * getWidth();\r\n};\r\n\r\nexport const isValidSize = (size: string | number): boolean =>\r\n\tregexTest(sizeRegex, size).length > 0;\r\n\r\nexport const calculateSize = (size: string | number): string | number => {\r\n\tconst splitSize = regexTest(sizeRegex, size);\r\n\tif (!splitSize || splitSize.length === 0) {\r\n\t\tthrow new Error(`Size is not valid: ${size}`);\r\n\t}\r\n\tconst extractedSize = parseFloat(splitSize[1]);\r\n\tlet properties = splitSize.slice(2);\r\n\tif (properties.length > 1) {\r\n\t\tproperties = properties.slice(1);\r\n\t}\r\n\tlet calculatedSize: string | number = 0;\r\n\tswitch (properties[0]) {\r\n\t\tcase \"s\":\r\n\t\t\tcalculatedSize = scale(extractedSize);\r\n\t\t\tbreak;\r\n\t\tcase \"vs\":\r\n\t\t\tcalculatedSize = verticalScale(extractedSize);\r\n\t\t\tbreak;\r\n\t\tcase \"ms\":\r\n\t\t\tcalculatedSize = moderateScale(extractedSize, properties[1]);\r\n\t\t\tbreak;\r\n\t\tcase \"mvs\":\r\n\t\t\tcalculatedSize = moderateVerticalScale(\r\n\t\t\t\textractedSize,\r\n\t\t\t\tproperties[1]\r\n\t\t\t);\r\n\t\t\tbreak;\r\n\t\tcase \"rem\":\r\n\t\t\tcalculatedSize = rem(extractedSize);\r\n\t\t\tbreak;\r\n\t\tcase \"vmin\":\r\n\t\t\tcalculatedSize = viewportMin(extractedSize);\r\n\t\t\tbreak;\r\n\t\tcase \"vmax\":\r\n\t\t\tcalculatedSize = viewportMax(extractedSize);\r\n\t\t\tbreak;\r\n\t\tcase \"vh\":\r\n\t\t\tcalculatedSize = viewportHeight(extractedSize);\r\n\t\t\tbreak;\r\n\t\tcase \"vw\":\r\n\t\t\tcalculatedSize = viewportWidth(extractedSize);\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tcalculatedSize = properties[0]\r\n\t\t\t\t? extractedSize + (properties[0] || \"\")\r\n\t\t\t\t: extractedSize;\r\n\t\t\tbreak;\r\n\t}\r\n\treturn calculatedSize;\r\n};\r\n\r\n// export const s = scale;\r\n// export const vs = verticalScale;\r\n// export const ms = moderateScale;\r\n// export const mvs = moderateVerticalScale;\r\n// export const vmin = viewportMin;\r\n// export const vmax = viewportMax;\r\n// export const vh = viewportHeight;\r\n\r\nexport const getCurrentOrientation = (): \"landscape\" | \"portrait\" => {\r\n\tconst width = getWidth();\r\n\tconst height = getHeight();\r\n\treturn width > height ? \"landscape\" : \"portrait\";\r\n};\r\n\r\nexport const setGuidelineBaseDimensions = (\r\n\tguidelineBaseWidth = 0,\r\n\tguidelineBaseHeight = 0\r\n): void => {\r\n\tconst baseWidth = isValidPositiveNumber(\r\n\t\tguidelineBaseWidth,\r\n\t\t\"Guideline Base Width should be a number.\",\r\n\t\t\"Guideline Base Width should be greater than 0.\"\r\n\t);\r\n\tconst baseHeight = isValidPositiveNumber(\r\n\t\tguidelineBaseHeight,\r\n\t\t\"Guideline Base Height should be a number.\",\r\n\t\t\"Guideline Base Height should be greater than 0.\"\r\n\t);\r\n\tdefaultSize.guidelineBaseHeight = baseHeight;\r\n\tdefaultSize.guidelineBaseWidth = baseWidth;\r\n};\r\n\r\nexport const setDefaultFontSize = (\r\n\tdefaultFontSize = 0,\r\n\tresponsive: boolean\r\n): void => {\r\n\tconst fontSize = isValidPositiveNumber(\r\n\t\tdefaultFontSize,\r\n\t\t\"Default Font Size should be a number.\",\r\n\t\t\"Default Font Size should be greater than 0.\"\r\n\t);\r\n\tdefaultSize.defaultFontSize = responsive ? scale(fontSize) : fontSize;\r\n};\r\n\r\nsetDefaultFontSize(16, true);\r\n"]}