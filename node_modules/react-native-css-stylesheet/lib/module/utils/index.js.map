{"version":3,"sources":["index.js"],"names":["regexTest","regex","str","results","m","exec","forEach","match","length","push","trim","numberRegex","isNumber","number","isValidPositiveNumber","notNumberMsg","shouldBePositiveMsg","formattedNumber","Error","parseFloat"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAG,CAACC,KAAD,EAAgBC,GAAhB,KAAmD;AAC3E,QAAMC,OAAiB,GAAG,EAA1B;AACA,QAAMC,CAAC,GAAGH,KAAK,CAACI,IAAN,CAAWH,GAAX,CAAV;;AACA,MAAIE,CAAC,KAAK,IAAV,EAAgB;AACfA,IAAAA,CAAC,CAACE,OAAF,CAAWC,KAAD,IAAW;AACpB,UAAIA,KAAK,IAAIA,KAAK,CAACC,MAAN,GAAe,CAA5B,EAA+B;AAC9BL,QAAAA,OAAO,CAACM,IAAR,CAAaF,KAAK,CAACG,IAAN,EAAb;AACA;AACD,KAJD;AAKA;;AACD,SAAOP,OAAP;AACA,CAXM;AAaP,MAAMQ,WAAW,GAAG,iBAApB;AACA,OAAO,MAAMC,QAAQ,GAAIC,MAAD,IACvBb,SAAS,CAACW,WAAD,EAAcE,MAAd,CAAT,CAA+BL,MAA/B,GAAwC,CADlC;AAGP,OAAO,MAAMM,qBAAqB,GAAG,CACpCD,MADoC,EAEpCE,YAFoC,EAGpCC,mBAHoC,KAIxB;AACZ,MAAIC,eAAe,GAAGJ,MAAtB;;AACA,MAAI,CAACD,QAAQ,CAACK,eAAD,CAAb,EAAgC;AAC/B,UAAM,IAAIC,KAAJ,CAAW,GAAEH,YAAa,aAAYE,eAAgB,EAAtD,CAAN;AACA,GAFD,MAEO;AACNA,IAAAA,eAAe,GAAGE,UAAU,CAACF,eAAD,CAA5B;AACA;;AACD,MAAIA,eAAe,IAAI,CAAvB,EAA0B;AACzB,UAAM,IAAIC,KAAJ,CACJ,GAAEF,mBAAmB,IAAID,YAAa,aAAYE,eAAgB,EAD9D,CAAN;AAGA;;AACD,SAAOA,eAAP;AACA,CAjBM","sourcesContent":["export const regexTest = (regex: RegExp, str: string | number): string[] => {\r\n\tconst results: string[] = [];\r\n\tconst m = regex.exec(str);\r\n\tif (m !== null) {\r\n\t\tm.forEach((match) => {\r\n\t\t\tif (match && match.length > 0) {\r\n\t\t\t\tresults.push(match.trim());\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\treturn results;\r\n};\r\n\r\nconst numberRegex = /^\\d+(?:\\.\\d+)?$/;\r\nexport const isNumber = (number: string | number): boolean =>\r\n\tregexTest(numberRegex, number).length > 0;\r\n\r\nexport const isValidPositiveNumber = (\r\n\tnumber: string | number,\r\n\tnotNumberMsg?: string,\r\n\tshouldBePositiveMsg?: string\r\n): number => {\r\n\tlet formattedNumber = number;\r\n\tif (!isNumber(formattedNumber)) {\r\n\t\tthrow new Error(`${notNumberMsg}\\n Found: ${formattedNumber}`);\r\n\t} else {\r\n\t\tformattedNumber = parseFloat(formattedNumber);\r\n\t}\r\n\tif (formattedNumber <= 0) {\r\n\t\tthrow new Error(\r\n\t\t\t`${shouldBePositiveMsg || notNumberMsg}\\n Found: ${formattedNumber}`\r\n\t\t);\r\n\t}\r\n\treturn formattedNumber;\r\n};\r\n"]}